{"version":3,"file":"static/js/86.ef6e823a.chunk.js","mappings":"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","sources":["Checkers/settings/GameSettings.tsx","Checkers/settings/Settings.tsx"],"sourcesContent":["import { ChangeEvent, FC } from 'react';\r\nimport { FormCheck, Form, FormSelect, FormGroup, FormLabel, Row, Col } from 'react-bootstrap';\r\nimport { useGameStorageContext } from '../game/gameStorage/gameStorage.tsx';\r\nimport { useSettingsStorageContext } from './settingsStorage/settingsStorage.tsx';\r\nimport { GAME_RULES, GameMode, Player, GameRule, BoardRow } from './settingsStorage/settingsStorageUtils.ts';\r\nimport './settingsStyling.scss';\r\n\r\nconst GameSettings: FC = () => {\r\n    const {\r\n        canGameBeLoaded\r\n    } = useGameStorageContext();\r\n\r\n    const {\r\n        gameSettings,\r\n        gameSettingOptions,\r\n        setGameSettings\r\n    } = useSettingsStorageContext();\r\n\r\n    /**\r\n     * Sets the game mode in the game settings.\r\n     * @param {ChangeEvent<HTMLSelectElement>} ev - The change event from the select element.\r\n     * @returns {void}\r\n     */\r\n    const setGameMode = (ev: ChangeEvent<HTMLSelectElement>): void => {\r\n        const gamemode = ev.target.value as GameMode;\r\n\r\n        setGameSettings((prevSettings) => ({\r\n            ...prevSettings,\r\n            mode: {\r\n                ...prevSettings.mode,\r\n                gamemode: gamemode\r\n            }\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * Sets the flag for the game rule in the game settings.\r\n     * @param {ChangeEvent<HTMLInputElement>} ev - The change event from the input element.\r\n     * @returns {void}\r\n     */\r\n    const setGameRule = (ev: ChangeEvent<HTMLInputElement>): void => {\r\n        const gameRule = ev.target.value as GameRule;\r\n        const value = ev.target.checked;\r\n\r\n        setGameSettings((prevSettings) => ({\r\n            ...prevSettings,\r\n            rules: {\r\n                ...prevSettings.rules,\r\n                [gameRule]: value\r\n            }\r\n        }));\r\n    };\r\n    \r\n    /**\r\n     * Sets the number of rows in the game board. \r\n     * (This is also the number of columns, since the board is a square.)\r\n     * @param {ChangeEvent<HTMLSelectElement>} ev - The change event from the select element.\r\n     * @returns {void}\r\n     */\r\n    const setBoardRow = (ev: ChangeEvent<HTMLSelectElement>): void => {\r\n        const row = Number(ev.target.value) as BoardRow;\r\n\r\n        setGameSettings((prevSettings) => ({\r\n            ...prevSettings,\r\n            board: {\r\n                ...prevSettings.board,\r\n                rows: row\r\n            }\r\n        }));\r\n    };\r\n    \r\n    /**\r\n     * Sets the initial player in the game settings.\r\n     * @param {ChangeEvent<HTMLSelectElement>} ev - The change event from the select element.\r\n     * @returns {void}\r\n     */\r\n    const setInitialPlayer = (ev: ChangeEvent<HTMLSelectElement>): void => {\r\n        const initialPlayer = Number(ev.target.value) as Player;\r\n\r\n        setGameSettings((prevSettings) => ({\r\n            ...prevSettings,\r\n            player: {\r\n                ...prevSettings.player,\r\n                initialPlayer\r\n            }\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col\r\n                    md={6}\r\n                    className='left-settings-column'\r\n                >\r\n                    <fieldset \r\n                        className='settings-group'\r\n                    >\r\n                        <legend \r\n                            className='settings-group-title'\r\n                        >\r\n                            Board settings\r\n                        </legend>\r\n                        <div \r\n                            className='mb-3 form-groups'\r\n                        >\r\n                            <FormGroup \r\n                                className='auto-width-form-group form-group'\r\n                            >\r\n                                <FormLabel \r\n                                    htmlFor='BoardRowetting'\r\n                                >\r\n                                    Number of rows\r\n                                </FormLabel>\r\n                                <FormSelect\r\n                                    id='BoardRowetting'\r\n                                    value={gameSettings.board.rows}\r\n                                    onChange={setBoardRow}\r\n                                    disabled={canGameBeLoaded}\r\n                                >\r\n                                    {gameSettingOptions.board.rows.map((row) => (\r\n                                        <option\r\n                                            value={row}\r\n                                            key={row}\r\n                                        >\r\n                                            {row}\r\n                                        </option>\r\n                                    ))}\r\n                                </FormSelect>\r\n                            </FormGroup>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset\r\n                        className='settings-group'\r\n                    >\r\n                        <legend \r\n                            className='settings-group-title'\r\n                        >\r\n                            Player settings\r\n                        </legend>\r\n                        <div \r\n                            className='mb-3 form-groups'\r\n                        >\r\n                            <FormGroup\r\n                                className='auto-width-form-group form-group'\r\n                            >\r\n                                <FormLabel\r\n                                    htmlFor='initialPlayerSetting'\r\n                                >\r\n                                    Initial player\r\n                                </FormLabel>\r\n                                <FormSelect\r\n                                    id='initialPlayerSetting'\r\n                                    className='form-select'\r\n                                    value={gameSettings.player.initialPlayer}\r\n                                    onChange={setInitialPlayer}\r\n                                    disabled={canGameBeLoaded}\r\n                                >\r\n                                    {gameSettingOptions.player.initialPlayer.map((player) => (\r\n                                        <option\r\n                                            value={player}\r\n                                            key={player}\r\n                                        >\r\n                                            Player {player}\r\n                                        </option>\r\n                                    ))}\r\n                                </FormSelect>\r\n                            </FormGroup>\r\n                        </div>\r\n                    </fieldset>\r\n                </Col>\r\n                <Col\r\n                    md={6}\r\n                >\r\n                    <fieldset \r\n                        className='settings-group'\r\n                    >\r\n                        <legend \r\n                            className='settings-group-title'\r\n                        >\r\n                            Mode settings\r\n                        </legend>\r\n                        <div\r\n                            className='mb-3'\r\n                        >\r\n                            <FormGroup \r\n                                className='auto-width-form-group'\r\n                            >\r\n                                <FormLabel \r\n                                    htmlFor='gameModeSetting'\r\n                                >\r\n                                    Game mode\r\n                                </FormLabel>\r\n                                <FormSelect\r\n                                    id='gameModeSetting'\r\n                                    className='form-select'\r\n                                    value={gameSettings.mode.gamemode}\r\n                                    onChange={setGameMode}\r\n                                    disabled={canGameBeLoaded}\r\n                                >\r\n                                    {gameSettingOptions.mode.gamemode.map((gamemode) => (\r\n                                        <option\r\n                                            value={gamemode}\r\n                                            key={gamemode}\r\n                                        >\r\n                                            {gamemode.toUpperCase()}\r\n                                        </option>\r\n                                    ))}\r\n                                </FormSelect>\r\n                            </FormGroup>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset \r\n                        className='settings-group'\r\n                    >\r\n                        <legend \r\n                            className='settings-group-title'\r\n                        >\r\n                            Game rules\r\n                        </legend>\r\n                        {GAME_RULES.map((gameRule) => (\r\n                            <div \r\n                                className='mb-3'\r\n                                key={gameRule}\r\n                            >\r\n                                <FormCheck\r\n                                    type='checkbox'\r\n                                    id={`${gameRule}Setting`}\r\n                                    label={gameRule.charAt(0).toUpperCase() + gameRule.slice(1).replace(/([A-Z])/g, ' $1').toLowerCase()}\r\n                                    checked={gameSettings.rules[gameRule]}\r\n                                    onChange={setGameRule}\r\n                                    value={gameRule}\r\n                                    disabled={canGameBeLoaded}\r\n                                    className='checkbox-right'\r\n                                />\r\n                            </div>\r\n                        ))}\r\n                    </fieldset>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default GameSettings;","import { FC, Suspense, useCallback, useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Nav, Navbar, NavLink, Row } from 'react-bootstrap';\r\nimport { useSettingsStorageContext } from './settingsStorage/settingsStorage.tsx';\r\nimport LoadingFallback from '../LoadingFallback.tsx';\r\n\r\n// Import for the components that can be toggled.\r\nimport Game from './GameSettings.tsx';\r\n\r\nimport './settingsStyling.scss';\r\n\r\n/**\r\n * Props for the Settings component.\r\n * - `togglePreviousComponent`: A function to toggle the visibility of the previous component.\r\n */\r\ninterface SettingsProps {\r\n    togglePreviousComponent: () => void;\r\n}\r\n\r\n// Global constant for the form names.\r\n// This is used to render the settings navigation links.\r\nconst _FORM_NAMES = ['game'] as const;\r\n\r\n/**\r\n * Type representing the names of the forms that can be toggled.\r\n */\r\ntype FormName = (typeof _FORM_NAMES)[number];\r\n\r\n// Map of component names to their respective (lazy-loaded) components.\r\nconst formComponentsMap: Record<FormName, () => React.ReactNode> = {\r\n    game: () => <Game />\r\n};\r\n\r\nconst Settings: FC<SettingsProps> = (props) => {\r\n    const {\r\n        togglePreviousComponent \r\n    } = props;\r\n\r\n    const {\r\n        setIsSettingFormShown\r\n    } = useSettingsStorageContext();\r\n\r\n    const [formName, setFormName] = useState<FormName>('game');\r\n\r\n    /**\r\n     * Handles the exit action when the user clicks the exit button.\r\n     * It will toggle the visibility of the previous component.\r\n     * @returns {void}\r\n     */\r\n    const handleExit = useCallback((): void => {\r\n        togglePreviousComponent();\r\n    }, [togglePreviousComponent]);\r\n\r\n    /**\r\n     * Generates an error message for an invalid form name.\r\n     * @param {FormName} formName - The name of the form that is invalid.\r\n     * @returns {string} - The error message indicating the invalid form name and available options.\r\n     */\r\n    const faultyFormNameErrorMessage = (formName: FormName): string => {\r\n        let errorMessage = `The form name '${formName}' isn't one of the possible form names. Please ensure that the form name is one of the following options: \\n`;\r\n\r\n        for (const availableFormName of _FORM_NAMES) {\r\n            errorMessage += `\\n- ${availableFormName}`;\r\n        }\r\n\r\n        return errorMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns the form component based on the current form name.\r\n     * * If the form name is invalid, it will log an error and default to the `game` form.\r\n     * @returns {React.ReactNode} - The form component to render.\r\n     */\r\n    const getFormComponent = (): React.ReactNode => {\r\n        const currentComponent = formComponentsMap[formName];\r\n        \r\n        if (!currentComponent) {\r\n            const errorMessage = faultyFormNameErrorMessage(formName) + '\\n\\nThe form for the game will be shown as fallback.';\r\n            console.error(errorMessage);\r\n            setFormName('game'); \r\n        }\r\n\r\n        return currentComponent();\r\n    }\r\n\r\n    /**\r\n     * Handles the keydown event.\r\n     * * If the Escape key is pressed, it will call the `handleExit` function.\r\n     * @param {KeyboardEvent} ev - The keydown event.\r\n     * @returns {void}\r\n     */\r\n    const keydownHandler = useCallback((ev: KeyboardEvent): void => {\r\n        const pressedKey = ev.key.toLowerCase();\r\n        if (pressedKey === 'escape') {\r\n            handleExit();\r\n        }\r\n    }, [handleExit]);\r\n\r\n    /**\r\n     * Adds the keydown event listener when the component mounts.\r\n     * * It will remove the event listener when the component unmounts.\r\n     */\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', keydownHandler);\r\n        return () => {\r\n            window.removeEventListener('keydown', keydownHandler);\r\n        };\r\n    }, [keydownHandler]);\r\n\r\n    /**\r\n     * * Sets the `isSettingFormShown` state to `true` when the component mounts.\r\n     * * Sets the `isSettingFormShown` state to `false` when the component unmounts.\r\n     */\r\n    useEffect(() => {\r\n        setIsSettingFormShown(true);\r\n        return () => {\r\n            setIsSettingFormShown(false);\r\n        };\r\n    }, [setIsSettingFormShown]);\r\n\r\n    return (\r\n        <div\r\n            data-testid='settings'\r\n        >\r\n            <div\r\n                className='m-3 d-flex justify-content-between'\r\n            >\r\n                <h1>\r\n                    Settings\r\n                </h1>\r\n                <Button\r\n                    data-testid='exitButton'\r\n                    className='border-0 bg-transparent text-dark text-bold btn btn-lg'\r\n                    onClick={handleExit}\r\n                >\r\n                    X\r\n                </Button>\r\n            </div>\r\n            <hr />\r\n            <Container\r\n                fluid\r\n            >\r\n                <Row>\r\n                    <Col \r\n                        md={2}\r\n                        className='d-flex justify-content-center align-items-start'\r\n                    >\r\n                        <Navbar>\r\n                            <Nav\r\n                                style={{\r\n                                    color: 'black',\r\n                                    fontSize: '1.25rem'\r\n                                }}\r\n                            >\r\n                                {_FORM_NAMES.map((formName) => {\r\n                                    const formNameCapitalized = formName.charAt(0).toUpperCase() + formName.slice(1);\r\n                                    const isFormShown = formName === formName;\r\n                                    return (\r\n                                        <NavLink\r\n                                            as={Button}\r\n                                            className='text-dark bg-transparent'\r\n                                            style={{\r\n                                                fontWeight: isFormShown ? 'bold' : 'normal',\r\n                                            }}\r\n                                            data-testid={`settingsNavLink${formNameCapitalized}`}\r\n                                            disabled={isFormShown}\r\n                                            draggable={false}\r\n                                            onClick={() => setFormName(formName)}\r\n                                            key={formName}\r\n                                        >\r\n                                            {formNameCapitalized}\r\n                                        </NavLink>\r\n                                    )\r\n                                })}\r\n                            </Nav>\r\n                        </Navbar>\r\n                    </Col>\r\n                    <Col\r\n                        md={10}\r\n                    >\r\n                        <Suspense\r\n                            fallback={<LoadingFallback />}\r\n                        >\r\n                            {getFormComponent()}\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;"],"names":["GameSettings","canGameBeLoaded","useGameStorageContext","gameSettings","gameSettingOptions","setGameSettings","useSettingsStorageContext","setGameRule","ev","gameRule","target","value","checked","prevSettings","rules","_jsx","Form","children","_jsxs","Row","Col","md","className","FormGroup","FormLabel","htmlFor","FormSelect","id","board","rows","onChange","row","Number","disabled","map","player","initialPlayer","mode","gamemode","toUpperCase","GAME_RULES","FormCheck","type","label","charAt","slice","replace","toLowerCase","_FORM_NAMES","formComponentsMap","game","Game","props","togglePreviousComponent","setIsSettingFormShown","formName","setFormName","useState","handleExit","useCallback","keydownHandler","key","useEffect","window","addEventListener","removeEventListener","Button","onClick","Container","fluid","Navbar","Nav","style","color","fontSize","formNameCapitalized","isFormShown","NavLink","as","fontWeight","draggable","Suspense","fallback","LoadingFallback","getFormComponent","currentComponent","errorMessage","availableFormName","faultyFormNameErrorMessage","console","error"],"sourceRoot":""}